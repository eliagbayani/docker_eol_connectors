services:
  # =================== MySQL service ===================
  db:
    # where we put environment variables. Put in .gitignore
    env_file:
      - ./.env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PW}
      MYSQL_DATABASE: eol_${MY_ENVIRONMENT}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_USER_PW}
    build:
      context: ./mysql
      args:
        MRP_FROM_COMPOSE: ${MYSQL_ROOT_PW}
        ENVIRONMENT_FROM_COMPOSE: ${MY_ENVIRONMENT}
      dockerfile: Dockerfile
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "mysql -h localhost -u root -p$$MYSQL_ROOT_PW" ]
      # 'localhost' or 'db' works just the same
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ${MYSQL_DATA_DIR}:/var/lib/mysql
    ports:
      - ${MYSQL_PORTS} # 4001:3306

  # =================== Apache and PHP service ===================
  web:
    build:
      context: ./apache-php
      args:
        ENVIRONMENT_FROM_COMPOSE: ${MY_ENVIRONMENT}
      dockerfile: Dockerfile
    # restart: always
    depends_on:
      db:
        condition: service_healthy
    # Below was working. I needed it if I want to restart Apache in terminal mode in Docker.
    environment:
      APACHE_RUN_DIR: /etc/apache2
      APACHE_RUN_USER: www-data
      APACHE_RUN_GROUP: www-data
      APACHE_PID_FILE: /var/run/apache2/apache2.pid
      APACHE_LOG_DIR: /var/log/apache2
      TARGET_PATH: ${WEBROOT_PATH}
      MY_ENV: ${MY_ENVIRONMENT}
    volumes:
      - ${WEBROOT_PATH}:/var/www/html
      - ${APACHE_LOGS}:/var/log/apache2
      - ${VOLUMES_LOCAL}:/Volumes
      - ${EXTRA_PATH}:/extra
    command: ${PWD}/apache-php/docker-entrypoint_${MY_ENVIRONMENT}.sh #works OK
    # entrypoint: ${PWD}/apache-php/docker-entrypoint.sh #works OK as well
    ports:
      - ${WEB_PORTS} # 81:80
    links:
      - db
    # Sol'n so u can curl local webserver from host. 
    # Use 'host.docker.internal' instead of 'localhost' in PHP script.
    # https://medium.com/@gladevise/accessing-the-hosts-localhost-from-inside-a-docker-container-c5935e275953
    extra_hosts:
      - "host.docker.internal:host-gateway"
  
  # =================== Jenkins service ===================
  jenkins:
    env_file: ./.env
    build:
      args:
        JENKINS_HOME_FROM_COMPOSE: "" #${JENKINS_HOME}
        JENKINS_TMP_FROM_COMPOSE: ${JENKINS_TMP}
      context: ./jenkins
      dockerfile: Dockerfile
    # restart: on-failure
    volumes:
      # - ${PWD}/jenkins_home:/var/jenkins_home
      # -> works OK

      - ${JENKINS_HOME}:/var/jenkins_home:rw
      # -> works OK; better implementation

      # - ${WEBROOT_PATH}:/webroot
      - ${WEBROOT_PATH}:/var/www/html

      - ${JENKINS_TMP}:/jenkins_tmp
      # - ${PWD}/jenkins_tmp:/jenkins_tmp     # -> works OK also

      - ${VOLUMES_LOCAL}:/Volumes
      - ${EXTRA_PATH}:/extra

    links:
      - web
      - db
    ports:
      - ${JENKINS_PORTS} # 8081:8080
      - ${JENKINS_PORTS_COMMUNICATION} # 50000:50000 # Jenkins default port for communication

    # extra_hosts:
    #   - "host.docker.internal:host-gateway"

    environment:
      JAVA_OPTS: "-Dhudson.footerURL=http://dev_connectors.eol.org -Djava.util.logging.config.file=/var/jenkins_home/log.properties -Djava.io.tmpdir=/jenkins_tmp"
    # network_mode: "bridge"
    # volumes:
    #   jenkins_home:


    # Solution: for sometimes --build get corrupted.
    # sudo rm  ~/.docker/config.json 
    # Rerun restart 
  # =================== Neo4j service ===================
  neo4j:
    env_file: ./.env
    
    container_name: neo4j
    # image: neo4j:latest
    # image: neo4j:enterprise-bullseye
    # image: neo4j:ubi9 #https://hub.docker.com/layers/library/neo4j/ubi9/images/sha256-7e3f6b03f983c132eb594901aeed538331c1d3cd75fef09f0f5a3de150d4e6d5
    # image: neo4j:enterprise-ubi9 #https://hub.docker.com/layers/library/neo4j/enterprise-ubi9/images/sha256-ea33aab418688b5f11cfb035b129b01465a4a0cfdd662585520533a762f67d65
    image: neo4j:5.26.8-enterprise-ubi9 #https://hub.docker.com/layers/library/neo4j/5.26.8-enterprise-ubi9/images/sha256-278e58c04f5b46738a115379934c189d5fd08ffa54b386f68658877d9cc8c8af
    # -> this ver. worked with neo4j-admin import

    ports:
      - ${PORT_7474}
      - ${PORT_7687}

    extra_hosts:
      - "host.docker.internal:host-gateway"

    environment:
      - NEO4J_AUTH=neo4j/${MY_NEO4J_PASSWORD}
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      # - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_PLUGINS=["apoc"]
      # - NEO4J_server.config.strict_validation.enabled=false

      # for the Enterprise edition only
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    volumes:
      # - ./neo4j_db/data:/data
      # - ./neo4j_db/logs:/logs
      # - ./neo4j_db/import:/var/lib/neo4j/import
      # - ./neo4j_db/plugins:/plugins

      # - ${PWD}/neo4j_db/data:/data
      # - ${PWD}/neo4j_db/logs:/logs
      # - ${PWD}/neo4j_db/import:/var/lib/neo4j/import
      # - ${PWD}/neo4j_db/plugins:/plugins

      - ${PATH_NEO4J_DATA}:/data
      - ${PATH_NEO4J_LOGS}:/logs
      - ${PATH_NEO4J_IMPORT}:/var/lib/neo4j/import
      - ${PATH_NEO4J_PLUGINS}:/plugins

  # ========================= END =========================